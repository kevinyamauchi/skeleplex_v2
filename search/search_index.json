{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Skeleplex docs","text":"<p>This is a not-yet-working refactor of the Skeleplex pipeline. Please check back later!</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>skeleplex<ul> <li>data<ul> <li>skeleton_image</li> </ul> </li> <li>graph<ul> <li>constants</li> <li>image_to_graph</li> <li>sample</li> <li>skeleton_graph</li> <li>spline</li> </ul> </li> <li>skeleton</li> </ul> </li> </ul>"},{"location":"reference/skeleplex/","title":"skeleplex","text":""},{"location":"reference/skeleplex/#skeleplex","title":"skeleplex","text":"<p>A Python package for analyzing skeletons.</p> <p>Modules:</p> <ul> <li> <code>data</code>           \u2013            <p>Example data.</p> </li> <li> <code>graph</code>           \u2013            <p>Tools to create a graph of a skeleton.</p> </li> <li> <code>skeleton</code>           \u2013            <p>Tools to create a skeleton image of a structure.</p> </li> </ul>"},{"location":"reference/skeleplex/data/","title":"data","text":""},{"location":"reference/skeleplex/data/#skeleplex.data","title":"skeleplex.data","text":"<p>Example data.</p> <p>Modules:</p> <ul> <li> <code>skeleton_image</code>           \u2013            <p>Example skeleton images.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>big_t</code>             \u2013              <p>Make an image with a big T skeleton.</p> </li> <li> <code>simple_t</code>             \u2013              <p>Make an image with a simple T skeleton.</p> </li> </ul>"},{"location":"reference/skeleplex/data/#skeleplex.data.big_t","title":"big_t","text":"<pre><code>big_t() -&gt; ndarray\n</code></pre> <p>Make an image with a big T skeleton.</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>A binary image with a big T skeleton. The image has shape (100, 100, 100)</p> </li> </ul> Source code in <code>skeleplex/data/skeleton_image.py</code> <pre><code>def big_t() -&gt; np.ndarray:\n    \"\"\"Make an image with a big T skeleton.\n\n    Returns\n    -------\n    np.ndarray\n        A binary image with a big T skeleton.\n        The image has shape (100, 100, 100)\n    \"\"\"\n    # node coordinates for each branch\n    branch_coordinates = [\n        [(50, 25), (50, 50)],\n        [(50, 50), (50, 75)],\n        [(50, 50), (75, 50)],\n    ]\n\n    # draw the image\n    image = np.zeros((100, 100, 100), dtype=bool)\n\n    for branch in branch_coordinates:\n        rr, cc = line(*branch[0], *branch[1])\n        image[50, rr, cc] = 1\n\n    return image\n</code></pre>"},{"location":"reference/skeleplex/data/#skeleplex.data.simple_t","title":"simple_t","text":"<pre><code>simple_t() -&gt; ndarray\n</code></pre> <p>Make an image with a simple T skeleton.</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>A binary image with a simple T skeleton. The image has shape (20, 20, 20)</p> </li> </ul> Source code in <code>skeleplex/data/skeleton_image.py</code> <pre><code>def simple_t() -&gt; np.ndarray:\n    \"\"\"Make an image with a simple T skeleton.\n\n    Returns\n    -------\n    np.ndarray\n        A binary image with a simple T skeleton.\n        The image has shape (20, 20, 20)\n    \"\"\"\n    # node coordinates for each branch\n    branch_coordinates = [\n        [(10, 5), (10, 10)],\n        [(10, 10), (10, 15)],\n        [(10, 10), (15, 10)],\n    ]\n\n    # draw the image\n    image = np.zeros((20, 20, 20), dtype=bool)\n\n    for branch in branch_coordinates:\n        rr, cc = line(*branch[0], *branch[1])\n        image[10, rr, cc] = 1\n\n    return image\n</code></pre>"},{"location":"reference/skeleplex/data/skeleton_image/","title":"skeleton_image","text":""},{"location":"reference/skeleplex/data/skeleton_image/#skeleplex.data.skeleton_image","title":"skeleplex.data.skeleton_image","text":"<p>Example skeleton images.</p> <p>Functions:</p> <ul> <li> <code>big_t</code>             \u2013              <p>Make an image with a big T skeleton.</p> </li> <li> <code>simple_t</code>             \u2013              <p>Make an image with a simple T skeleton.</p> </li> </ul>"},{"location":"reference/skeleplex/data/skeleton_image/#skeleplex.data.skeleton_image.big_t","title":"big_t","text":"<pre><code>big_t() -&gt; ndarray\n</code></pre> <p>Make an image with a big T skeleton.</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>A binary image with a big T skeleton. The image has shape (100, 100, 100)</p> </li> </ul> Source code in <code>skeleplex/data/skeleton_image.py</code> <pre><code>def big_t() -&gt; np.ndarray:\n    \"\"\"Make an image with a big T skeleton.\n\n    Returns\n    -------\n    np.ndarray\n        A binary image with a big T skeleton.\n        The image has shape (100, 100, 100)\n    \"\"\"\n    # node coordinates for each branch\n    branch_coordinates = [\n        [(50, 25), (50, 50)],\n        [(50, 50), (50, 75)],\n        [(50, 50), (75, 50)],\n    ]\n\n    # draw the image\n    image = np.zeros((100, 100, 100), dtype=bool)\n\n    for branch in branch_coordinates:\n        rr, cc = line(*branch[0], *branch[1])\n        image[50, rr, cc] = 1\n\n    return image\n</code></pre>"},{"location":"reference/skeleplex/data/skeleton_image/#skeleplex.data.skeleton_image.simple_t","title":"simple_t","text":"<pre><code>simple_t() -&gt; ndarray\n</code></pre> <p>Make an image with a simple T skeleton.</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>A binary image with a simple T skeleton. The image has shape (20, 20, 20)</p> </li> </ul> Source code in <code>skeleplex/data/skeleton_image.py</code> <pre><code>def simple_t() -&gt; np.ndarray:\n    \"\"\"Make an image with a simple T skeleton.\n\n    Returns\n    -------\n    np.ndarray\n        A binary image with a simple T skeleton.\n        The image has shape (20, 20, 20)\n    \"\"\"\n    # node coordinates for each branch\n    branch_coordinates = [\n        [(10, 5), (10, 10)],\n        [(10, 10), (10, 15)],\n        [(10, 10), (15, 10)],\n    ]\n\n    # draw the image\n    image = np.zeros((20, 20, 20), dtype=bool)\n\n    for branch in branch_coordinates:\n        rr, cc = line(*branch[0], *branch[1])\n        image[10, rr, cc] = 1\n\n    return image\n</code></pre>"},{"location":"reference/skeleplex/graph/","title":"graph","text":""},{"location":"reference/skeleplex/graph/#skeleplex.graph","title":"skeleplex.graph","text":"<p>Tools to create a graph of a skeleton.</p> <p>Modules:</p> <ul> <li> <code>constants</code>           \u2013            <p>Constants used for interacting with the graph objects.</p> </li> <li> <code>image_to_graph</code>           \u2013            <p>Utilities to convert a skeleton image to a graph.</p> </li> <li> <code>sample</code>           \u2013            <p>Functions for sampling images using the SkeletonGraph.</p> </li> <li> <code>skeleton_graph</code>           \u2013            <p>Data class for a skeleton graph.</p> </li> <li> <code>spline</code>           \u2013            <p>Utilities for fitting and working with splines.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>SkeletonGraph</code>           \u2013            <p>Data class for a skeleton graph.</p> </li> </ul>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph","title":"SkeletonGraph","text":"<pre><code>SkeletonGraph(graph: Graph)\n</code></pre> <p>Data class for a skeleton graph.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>from_json_file</code>             \u2013              <p>Return a SkeletonGraph from a JSON file.</p> </li> <li> <code>from_skeleton_image</code>             \u2013              <p>Return a SkeletonGraph from a skeleton image.</p> </li> <li> <code>orient_splines</code>             \u2013              <p>Orient the splines in the graph.</p> </li> <li> <code>to_directed</code>             \u2013              <p>Return a directed graph from the skeleton graph.</p> </li> <li> <code>to_json_file</code>             \u2013              <p>Return a JSON representation of the graph.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>backend</code>               (<code>str</code>)           \u2013            <p>Return the backend used to store the graph.</p> </li> <li> <code>edge_splines</code>               (<code>dict</code>)           \u2013            <p>Return a list of edge splines.</p> </li> <li> <code>edges</code>           \u2013            <p>Return a list of edges.</p> </li> <li> <code>node_coordinates</code>               (<code>dict</code>)           \u2013            <p>Return a dictionary of node coordinates.</p> </li> <li> <code>node_coordinates_array</code>               (<code>ndarray</code>)           \u2013            <p>Return a numpy array of node coordinates.</p> </li> <li> <code>nodes</code>           \u2013            <p>Return a list of nodes.</p> </li> </ul> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def __init__(self, graph: nx.Graph):\n    self.graph = graph\n</code></pre>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph(graph)","title":"<code>graph</code>","text":"(<code>Graph</code>)           \u2013            <p>The skeleton graph.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.backend","title":"backend  <code>property</code>","text":"<pre><code>backend: str\n</code></pre> <p>Return the backend used to store the graph.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.edge_splines","title":"edge_splines  <code>property</code>","text":"<pre><code>edge_splines: dict\n</code></pre> <p>Return a list of edge splines.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.edges","title":"edges  <code>property</code>","text":"<pre><code>edges\n</code></pre> <p>Return a list of edges.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.node_coordinates","title":"node_coordinates  <code>property</code>","text":"<pre><code>node_coordinates: dict\n</code></pre> <p>Return a dictionary of node coordinates.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.node_coordinates_array","title":"node_coordinates_array  <code>property</code>","text":"<pre><code>node_coordinates_array: ndarray\n</code></pre> <p>Return a numpy array of node coordinates.</p> <p>The array is of shape (n_nodes, n_dimensions). The order of the nodes is the same as the order of the nodes attribute.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.nodes","title":"nodes  <code>property</code>","text":"<pre><code>nodes\n</code></pre> <p>Return a list of nodes.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.from_json_file","title":"from_json_file  <code>classmethod</code>","text":"<pre><code>from_json_file(file_path: str)\n</code></pre> <p>Return a SkeletonGraph from a JSON file.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>@classmethod\ndef from_json_file(cls, file_path: str):\n    \"\"\"Return a SkeletonGraph from a JSON file.\"\"\"\n    with open(file_path) as file:\n        object_dict = json.load(file, object_hook=skeleton_graph_decoder)\n    graph = nx.node_link_graph(object_dict[\"graph\"], edges=\"edges\")\n    return cls(graph=graph)\n</code></pre>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.from_skeleton_image","title":"from_skeleton_image  <code>classmethod</code>","text":"<pre><code>from_skeleton_image(skeleton_image: ndarray, max_spline_knots: int = 10) -&gt; SkeletonGraph\n</code></pre> <p>Return a SkeletonGraph from a skeleton image.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>@classmethod\ndef from_skeleton_image(\n    cls, skeleton_image: np.ndarray, max_spline_knots: int = 10\n) -&gt; \"SkeletonGraph\":\n    \"\"\"Return a SkeletonGraph from a skeleton image.\n\n    Parameters\n    ----------\n    skeleton_image : np.ndarray\n        The skeleton image to convert to a graph.\n    max_spline_knots : int\n        The maximum number of knots to use for the spline fit to the branch path.\n        If the number of data points in the branch is less than this number,\n        the spline will use n_data_points - 1 knots.\n        See the splinebox Spline class docs for more information.\n    \"\"\"\n    graph = image_to_graph_skan(\n        skeleton_image=skeleton_image, max_spline_knots=max_spline_knots\n    )\n    return cls(graph=graph)\n</code></pre>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.from_skeleton_image(skeleton_image)","title":"<code>skeleton_image</code>","text":"(<code>ndarray</code>)           \u2013            <p>The skeleton image to convert to a graph.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.from_skeleton_image(max_spline_knots)","title":"<code>max_spline_knots</code>","text":"(<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of knots to use for the spline fit to the branch path. If the number of data points in the branch is less than this number, the spline will use n_data_points - 1 knots. See the splinebox Spline class docs for more information.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.orient_splines","title":"orient_splines","text":"<pre><code>orient_splines() -&gt; DiGraph\n</code></pre> <p>Orient the splines in the graph.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def orient_splines(self) -&gt; nx.DiGraph:\n    \"\"\"Orient the splines in the graph.\"\"\"\n    self.graph = orient_splines(self.graph)\n    return self.graph\n</code></pre>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.to_directed","title":"to_directed","text":"<pre><code>to_directed(origin: int) -&gt; DiGraph\n</code></pre> <p>Return a directed graph from the skeleton graph.</p> <p>The directed graph has the same nodes and edges as the skeleton graph.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def to_directed(self, origin: int) -&gt; nx.DiGraph:\n    \"\"\"Return a directed graph from the skeleton graph.\n\n    The directed graph has the same nodes and edges as the skeleton graph.\n\n    Parameters\n    ----------\n    origin : int\n        The node to use as the origin node for the directed graph.\n        The origin node will have no incoming edges.\n    \"\"\"\n    self.graph = make_graph_directed(self.graph, origin)\n    return self.graph\n</code></pre>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.to_directed(origin)","title":"<code>origin</code>","text":"(<code>int</code>)           \u2013            <p>The node to use as the origin node for the directed graph. The origin node will have no incoming edges.</p>"},{"location":"reference/skeleplex/graph/#skeleplex.graph.SkeletonGraph.to_json_file","title":"to_json_file","text":"<pre><code>to_json_file(file_path: str)\n</code></pre> <p>Return a JSON representation of the graph.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def to_json_file(self, file_path: str):\n    \"\"\"Return a JSON representation of the graph.\"\"\"\n    graph_dict = nx.node_link_data(self.graph, edges=\"edges\")\n    object_dict = {\"graph\": graph_dict}\n\n    with open(file_path, \"w\") as file:\n        json.dump(object_dict, file, indent=2, default=skeleton_graph_encoder)\n</code></pre>"},{"location":"reference/skeleplex/graph/constants/","title":"constants","text":""},{"location":"reference/skeleplex/graph/constants/#skeleplex.graph.constants","title":"skeleplex.graph.constants","text":"<p>Constants used for interacting with the graph objects.</p> <p>Generally, these are property or key names.</p>"},{"location":"reference/skeleplex/graph/image_to_graph/","title":"image_to_graph","text":""},{"location":"reference/skeleplex/graph/image_to_graph/#skeleplex.graph.image_to_graph","title":"skeleplex.graph.image_to_graph","text":"<p>Utilities to convert a skeleton image to a graph.</p> <p>Functions:</p> <ul> <li> <code>image_to_graph_skan</code>             \u2013              <p>Convert a skeleton image to a graph using skan.</p> </li> </ul>"},{"location":"reference/skeleplex/graph/image_to_graph/#skeleplex.graph.image_to_graph.image_to_graph_skan","title":"image_to_graph_skan","text":"<pre><code>image_to_graph_skan(skeleton_image: ndarray, max_spline_knots: int = 10) -&gt; MultiGraph\n</code></pre> <p>Convert a skeleton image to a graph using skan.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/image_to_graph.py</code> <pre><code>def image_to_graph_skan(\n    skeleton_image: np.ndarray, max_spline_knots: int = 10\n) -&gt; nx.MultiGraph:\n    \"\"\"Convert a skeleton image to a graph using skan.\n\n    Parameters\n    ----------\n    skeleton_image : np.ndarray\n        The image to convert to a skeleton graph.\n        The image should be a binary image and already skeletonized.\n    max_spline_knots : int\n        The maximum number of knots to use for the spline fit to the branch path.\n        If the number of data points in the branch is less than this number,\n        the spline will use n_data_points - 1 knots.\n        See the splinebox Spline class docs for more information.\n    \"\"\"\n    # make the skeleton\n    skeleton = SkanSkeleton(skeleton_image=skeleton_image)\n    summary_table = summarize(skeleton, separator=\"_\")\n\n    # get all of the nodes\n    # this might be slow - may need to speed up\n    # source_nodes = set(summary_table[\"node_id_src\"])\n    # destination_nodes = set(summary_table[\"node_id_dst\"])\n    # all_nodes = source_nodes.union(destination_nodes)\n\n    skeleton_graph = nx.MultiGraph()\n    for row in summary_table.itertuples(name=\"Edge\"):\n        # Iterate over the rows in the table.\n        # Each row is an edge in the graph\n        index = row.Index\n        i = row.node_id_src\n        j = row.node_id_dst\n\n        # fit a spline to the path\n        # todo: factor our to spline module\n        # todo: reconsider how the number of knots is set\n        spline_path = skeleton.path_coordinates(index)\n        n_points = len(spline_path)\n        if n_points &lt;= max_spline_knots:\n            n_spline_knots = n_points - 1\n        else:\n            n_spline_knots = max_spline_knots\n        spline = B3Spline.from_points(\n            points=spline_path,\n            n_knots=n_spline_knots,\n        )\n        # Nodes are added if they don't exist so only need to add edges\n        skeleton_graph.add_edge(\n            i,\n            j,\n            **{\"path\": spline_path, \"spline\": spline},\n        )\n\n    # add the node coordinates\n    new_node_data = {}\n    for node_index, node_data in skeleton_graph.nodes(data=True):\n        node_data[NODE_COORDINATE_KEY] = np.asarray(skeleton.coordinates[node_index])\n        new_node_data[node_index] = node_data\n\n    nx.set_node_attributes(skeleton_graph, new_node_data)\n\n    return skeleton_graph\n</code></pre>"},{"location":"reference/skeleplex/graph/image_to_graph/#skeleplex.graph.image_to_graph.image_to_graph_skan(skeleton_image)","title":"<code>skeleton_image</code>","text":"(<code>ndarray</code>)           \u2013            <p>The image to convert to a skeleton graph. The image should be a binary image and already skeletonized.</p>"},{"location":"reference/skeleplex/graph/image_to_graph/#skeleplex.graph.image_to_graph.image_to_graph_skan(max_spline_knots)","title":"<code>max_spline_knots</code>","text":"(<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of knots to use for the spline fit to the branch path. If the number of data points in the branch is less than this number, the spline will use n_data_points - 1 knots. See the splinebox Spline class docs for more information.</p>"},{"location":"reference/skeleplex/graph/sample/","title":"sample","text":""},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample","title":"skeleplex.graph.sample","text":"<p>Functions for sampling images using the SkeletonGraph.</p> <p>Functions:</p> <ul> <li> <code>generate_2d_grid</code>             \u2013              <p>Generate a 2D sampling grid with specified shape and spacing.</p> </li> <li> <code>generate_3d_grid</code>             \u2013              <p>Generate a 3D sampling grid with specified shape and spacing.</p> </li> <li> <code>sample_volume_at_coordinates</code>             \u2013              <p>Sample a volume with spline interpolation at specific coordinates.</p> </li> </ul>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.generate_2d_grid","title":"generate_2d_grid","text":"<pre><code>generate_2d_grid(grid_shape: tuple[int, int] = (10, 10), grid_spacing: tuple[float, float] = (1, 1)) -&gt; ndarray\n</code></pre> <p>Generate a 2D sampling grid with specified shape and spacing.</p> <p>The grid generated is centered on the origin, lying on the plane with normal vector [1, 0, 0], has shape (w, h, 3) for grid_shape (w, h), and spacing grid_spacing between neighboring points.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>Coordinate of points forming the 2D grid.</p> </li> </ul> Source code in <code>skeleplex/graph/sample.py</code> <pre><code>def generate_2d_grid(\n    grid_shape: tuple[int, int] = (10, 10), grid_spacing: tuple[float, float] = (1, 1)\n) -&gt; np.ndarray:\n    \"\"\"\n    Generate a 2D sampling grid with specified shape and spacing.\n\n    The grid generated is centered on the origin, lying on the plane with normal\n    vector [1, 0, 0], has shape (w, h, 3) for grid_shape (w, h), and spacing\n    grid_spacing between neighboring points.\n\n    Parameters\n    ----------\n    grid_shape : Tuple[int, int]\n        The number of grid points along each axis.\n    grid_spacing : Tuple[float, float]\n        Spacing between points in the sampling grid.\n\n    Returns\n    -------\n    np.ndarray\n        Coordinate of points forming the 2D grid.\n    \"\"\"\n    grid = generate_3d_grid(\n        grid_shape=(1, *grid_shape), grid_spacing=(1, *grid_spacing)\n    )\n    return einops.rearrange(grid, \"1 w h xyz -&gt; w h xyz\")\n</code></pre>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.generate_2d_grid(grid_shape)","title":"<code>grid_shape</code>","text":"(<code>Tuple[int, int]</code>, default:                   <code>(10, 10)</code> )           \u2013            <p>The number of grid points along each axis.</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.generate_2d_grid(grid_spacing)","title":"<code>grid_spacing</code>","text":"(<code>Tuple[float, float]</code>, default:                   <code>(1, 1)</code> )           \u2013            <p>Spacing between points in the sampling grid.</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.generate_3d_grid","title":"generate_3d_grid","text":"<pre><code>generate_3d_grid(grid_shape: tuple[int, int, int] = (10, 10, 10), grid_spacing: tuple[float, float, float] = (1, 1, 1)) -&gt; ndarray\n</code></pre> <p>Generate a 3D sampling grid with specified shape and spacing.</p> <p>The grid generated is centered on the origin, has shape (w, h, d, 3) for grid_shape (w, h, d), and spacing grid_spacing between neighboring points.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>Coordinate of points forming the 3D grid.</p> </li> </ul> Source code in <code>skeleplex/graph/sample.py</code> <pre><code>def generate_3d_grid(\n    grid_shape: tuple[int, int, int] = (10, 10, 10),\n    grid_spacing: tuple[float, float, float] = (1, 1, 1),\n) -&gt; np.ndarray:\n    \"\"\"\n    Generate a 3D sampling grid with specified shape and spacing.\n\n    The grid generated is centered on the origin, has shape (w, h, d, 3) for\n    grid_shape (w, h, d), and spacing grid_spacing between neighboring points.\n\n    Parameters\n    ----------\n    grid_shape : Tuple[int, int, int]\n        The number of grid points along each axis.\n    grid_spacing : Tuple[float, float, float]\n        Spacing between points in the sampling grid.\n\n    Returns\n    -------\n    np.ndarray\n        Coordinate of points forming the 3D grid.\n    \"\"\"\n    # generate a grid of points at each integer from 0 to grid_shape for each dimension\n    grid = np.indices(grid_shape).astype(float)\n    grid = einops.rearrange(grid, \"xyz w h d -&gt; w h d xyz\")\n    # shift the grid to be centered on the origin\n    grid_offset = (np.array(grid_shape)) // 2\n    grid -= grid_offset\n    # scale the grid to get correct spacing\n    grid *= grid_spacing\n    return grid\n</code></pre>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.generate_3d_grid(grid_shape)","title":"<code>grid_shape</code>","text":"(<code>Tuple[int, int, int]</code>, default:                   <code>(10, 10, 10)</code> )           \u2013            <p>The number of grid points along each axis.</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.generate_3d_grid(grid_spacing)","title":"<code>grid_spacing</code>","text":"(<code>Tuple[float, float, float]</code>, default:                   <code>(1, 1, 1)</code> )           \u2013            <p>Spacing between points in the sampling grid.</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.sample_volume_at_coordinates","title":"sample_volume_at_coordinates","text":"<pre><code>sample_volume_at_coordinates(volume: ndarray, coordinates: ndarray, interpolation_order: int = 3, fill_value: float = nan) -&gt; ndarray\n</code></pre> <p>Sample a volume with spline interpolation at specific coordinates.</p> <p>The output shape is determined by the input coordinate shape such that if coordinates have shape (batch, grid_shape, 3), the output array will have shape (grid_shape, batch).</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>Array of shape (*grid_shape)</p> </li> </ul> Source code in <code>skeleplex/graph/sample.py</code> <pre><code>def sample_volume_at_coordinates(\n    volume: np.ndarray,\n    coordinates: np.ndarray,\n    interpolation_order: int = 3,\n    fill_value: float = np.nan,\n) -&gt; np.ndarray:\n    \"\"\"\n    Sample a volume with spline interpolation at specific coordinates.\n\n    The output shape is determined by the input coordinate shape such that\n    if coordinates have shape (batch, *grid_shape, 3), the output array will have\n    shape (*grid_shape, batch).\n\n    Parameters\n    ----------\n    volume : np.ndarray\n        Volume to be sampled.\n    coordinates : np.ndarray\n        Array of coordinates at which to sample the volume. The shape of this array\n        should be (batch, *grid_shape, 3) to allow reshaping back correctly\n    interpolation_order : int\n        Spline order for image interpolation.\n    fill_value : float\n        Value to fill in for sample coordinates past the edges of the volume.\n\n    Returns\n    -------\n    np.ndarray\n        Array of shape (*grid_shape)\n    \"\"\"\n    batch, *grid_shape, _ = coordinates.shape\n    # map_coordinates wants transposed coordinate array\n    sampled_volume = map_coordinates(\n        volume,\n        coordinates.reshape(-1, 3).T,\n        order=interpolation_order,\n        cval=fill_value,\n    )\n    # reshape back (need to invert due to previous transposition)\n    sampled_volume = sampled_volume.reshape(*grid_shape, batch)\n    # and retranspose to get batch back to the 0th dimension\n    return einops.rearrange(sampled_volume, \"... batch -&gt; batch ...\")\n</code></pre>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.sample_volume_at_coordinates(volume)","title":"<code>volume</code>","text":"(<code>ndarray</code>)           \u2013            <p>Volume to be sampled.</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.sample_volume_at_coordinates(coordinates)","title":"<code>coordinates</code>","text":"(<code>ndarray</code>)           \u2013            <p>Array of coordinates at which to sample the volume. The shape of this array should be (batch, *grid_shape, 3) to allow reshaping back correctly</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.sample_volume_at_coordinates(interpolation_order)","title":"<code>interpolation_order</code>","text":"(<code>int</code>, default:                   <code>3</code> )           \u2013            <p>Spline order for image interpolation.</p>"},{"location":"reference/skeleplex/graph/sample/#skeleplex.graph.sample.sample_volume_at_coordinates(fill_value)","title":"<code>fill_value</code>","text":"(<code>float</code>, default:                   <code>nan</code> )           \u2013            <p>Value to fill in for sample coordinates past the edges of the volume.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/","title":"skeleton_graph","text":""},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph","title":"skeleplex.graph.skeleton_graph","text":"<p>Data class for a skeleton graph.</p> <p>Classes:</p> <ul> <li> <code>SkeletonGraph</code>           \u2013            <p>Data class for a skeleton graph.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_next_node_key</code>             \u2013              <p>Return the next available node key in the graph.</p> </li> <li> <code>make_graph_directed</code>             \u2013              <p>Return a directed graph from an undirected graph.</p> </li> <li> <code>orient_splines</code>             \u2013              <p>Checks if the splines are oriented correctly.</p> </li> <li> <code>skeleton_graph_decoder</code>             \u2013              <p>JSON decoder for the networkx skeleton graph.</p> </li> <li> <code>skeleton_graph_encoder</code>             \u2013              <p>JSON encoder for the networkx skeleton graph.</p> </li> </ul>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph","title":"SkeletonGraph","text":"<pre><code>SkeletonGraph(graph: Graph)\n</code></pre> <p>Data class for a skeleton graph.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>from_json_file</code>             \u2013              <p>Return a SkeletonGraph from a JSON file.</p> </li> <li> <code>from_skeleton_image</code>             \u2013              <p>Return a SkeletonGraph from a skeleton image.</p> </li> <li> <code>orient_splines</code>             \u2013              <p>Orient the splines in the graph.</p> </li> <li> <code>to_directed</code>             \u2013              <p>Return a directed graph from the skeleton graph.</p> </li> <li> <code>to_json_file</code>             \u2013              <p>Return a JSON representation of the graph.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>backend</code>               (<code>str</code>)           \u2013            <p>Return the backend used to store the graph.</p> </li> <li> <code>edge_splines</code>               (<code>dict</code>)           \u2013            <p>Return a list of edge splines.</p> </li> <li> <code>edges</code>           \u2013            <p>Return a list of edges.</p> </li> <li> <code>node_coordinates</code>               (<code>dict</code>)           \u2013            <p>Return a dictionary of node coordinates.</p> </li> <li> <code>node_coordinates_array</code>               (<code>ndarray</code>)           \u2013            <p>Return a numpy array of node coordinates.</p> </li> <li> <code>nodes</code>           \u2013            <p>Return a list of nodes.</p> </li> </ul> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def __init__(self, graph: nx.Graph):\n    self.graph = graph\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph(graph)","title":"<code>graph</code>","text":"(<code>Graph</code>)           \u2013            <p>The skeleton graph.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.backend","title":"backend  <code>property</code>","text":"<pre><code>backend: str\n</code></pre> <p>Return the backend used to store the graph.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.edge_splines","title":"edge_splines  <code>property</code>","text":"<pre><code>edge_splines: dict\n</code></pre> <p>Return a list of edge splines.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.edges","title":"edges  <code>property</code>","text":"<pre><code>edges\n</code></pre> <p>Return a list of edges.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.node_coordinates","title":"node_coordinates  <code>property</code>","text":"<pre><code>node_coordinates: dict\n</code></pre> <p>Return a dictionary of node coordinates.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.node_coordinates_array","title":"node_coordinates_array  <code>property</code>","text":"<pre><code>node_coordinates_array: ndarray\n</code></pre> <p>Return a numpy array of node coordinates.</p> <p>The array is of shape (n_nodes, n_dimensions). The order of the nodes is the same as the order of the nodes attribute.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.nodes","title":"nodes  <code>property</code>","text":"<pre><code>nodes\n</code></pre> <p>Return a list of nodes.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.from_json_file","title":"from_json_file  <code>classmethod</code>","text":"<pre><code>from_json_file(file_path: str)\n</code></pre> <p>Return a SkeletonGraph from a JSON file.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>@classmethod\ndef from_json_file(cls, file_path: str):\n    \"\"\"Return a SkeletonGraph from a JSON file.\"\"\"\n    with open(file_path) as file:\n        object_dict = json.load(file, object_hook=skeleton_graph_decoder)\n    graph = nx.node_link_graph(object_dict[\"graph\"], edges=\"edges\")\n    return cls(graph=graph)\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.from_skeleton_image","title":"from_skeleton_image  <code>classmethod</code>","text":"<pre><code>from_skeleton_image(skeleton_image: ndarray, max_spline_knots: int = 10) -&gt; SkeletonGraph\n</code></pre> <p>Return a SkeletonGraph from a skeleton image.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>@classmethod\ndef from_skeleton_image(\n    cls, skeleton_image: np.ndarray, max_spline_knots: int = 10\n) -&gt; \"SkeletonGraph\":\n    \"\"\"Return a SkeletonGraph from a skeleton image.\n\n    Parameters\n    ----------\n    skeleton_image : np.ndarray\n        The skeleton image to convert to a graph.\n    max_spline_knots : int\n        The maximum number of knots to use for the spline fit to the branch path.\n        If the number of data points in the branch is less than this number,\n        the spline will use n_data_points - 1 knots.\n        See the splinebox Spline class docs for more information.\n    \"\"\"\n    graph = image_to_graph_skan(\n        skeleton_image=skeleton_image, max_spline_knots=max_spline_knots\n    )\n    return cls(graph=graph)\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.from_skeleton_image(skeleton_image)","title":"<code>skeleton_image</code>","text":"(<code>ndarray</code>)           \u2013            <p>The skeleton image to convert to a graph.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.from_skeleton_image(max_spline_knots)","title":"<code>max_spline_knots</code>","text":"(<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of knots to use for the spline fit to the branch path. If the number of data points in the branch is less than this number, the spline will use n_data_points - 1 knots. See the splinebox Spline class docs for more information.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.orient_splines","title":"orient_splines","text":"<pre><code>orient_splines() -&gt; DiGraph\n</code></pre> <p>Orient the splines in the graph.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def orient_splines(self) -&gt; nx.DiGraph:\n    \"\"\"Orient the splines in the graph.\"\"\"\n    self.graph = orient_splines(self.graph)\n    return self.graph\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.to_directed","title":"to_directed","text":"<pre><code>to_directed(origin: int) -&gt; DiGraph\n</code></pre> <p>Return a directed graph from the skeleton graph.</p> <p>The directed graph has the same nodes and edges as the skeleton graph.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def to_directed(self, origin: int) -&gt; nx.DiGraph:\n    \"\"\"Return a directed graph from the skeleton graph.\n\n    The directed graph has the same nodes and edges as the skeleton graph.\n\n    Parameters\n    ----------\n    origin : int\n        The node to use as the origin node for the directed graph.\n        The origin node will have no incoming edges.\n    \"\"\"\n    self.graph = make_graph_directed(self.graph, origin)\n    return self.graph\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.to_directed(origin)","title":"<code>origin</code>","text":"(<code>int</code>)           \u2013            <p>The node to use as the origin node for the directed graph. The origin node will have no incoming edges.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.SkeletonGraph.to_json_file","title":"to_json_file","text":"<pre><code>to_json_file(file_path: str)\n</code></pre> <p>Return a JSON representation of the graph.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def to_json_file(self, file_path: str):\n    \"\"\"Return a JSON representation of the graph.\"\"\"\n    graph_dict = nx.node_link_data(self.graph, edges=\"edges\")\n    object_dict = {\"graph\": graph_dict}\n\n    with open(file_path, \"w\") as file:\n        json.dump(object_dict, file, indent=2, default=skeleton_graph_encoder)\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.get_next_node_key","title":"get_next_node_key","text":"<pre><code>get_next_node_key(graph: Graph) -&gt; int\n</code></pre> <p>Return the next available node key in the graph.</p> <p>This function assumes the graph node keys are integers.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The next available node key. This is the maximum node key + 1. If there are no nodes, the function returns 0.</p> </li> </ul> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def get_next_node_key(graph: nx.Graph) -&gt; int:\n    \"\"\"Return the next available node key in the graph.\n\n    This function assumes the graph node keys are integers.\n\n    Parameters\n    ----------\n    graph : nx.Graph\n        The graph to get the next node key from.\n\n    Returns\n    -------\n    int\n        The next available node key.\n        This is the maximum node key + 1.\n        If there are no nodes, the function returns 0.\n    \"\"\"\n    return int(np.max(graph.nodes)) + 1 if graph.nodes else 0\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.get_next_node_key(graph)","title":"<code>graph</code>","text":"(<code>Graph</code>)           \u2013            <p>The graph to get the next node key from.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.make_graph_directed","title":"make_graph_directed","text":"<pre><code>make_graph_directed(graph: Graph, origin: int) -&gt; DiGraph\n</code></pre> <p>Return a directed graph from an undirected graph.</p> <p>The directed graph has the same nodes and edges as the undirected graph. If the graph is fragmented, meaning has multiple unconnected subgraphs, the function will choose the node with the highest degree as the origin node for each fragment.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def make_graph_directed(graph: nx.Graph, origin: int) -&gt; nx.DiGraph:\n    \"\"\"Return a directed graph from an undirected graph.\n\n    The directed graph has the same nodes and edges as the undirected graph.\n    If the graph is fragmented, meaning has multiple unconnected subgraphs,\n    the function will choose the node with the highest degree as the origin node\n    for each fragment.\n\n    Parameters\n    ----------\n    graph : nx.Graph\n        The undirected graph to convert to a directed graph.\n    origin : int\n        The node to use as the origin node for the directed graph.\n        The origin node will have no incoming edges.\n    \"\"\"\n    if isinstance(graph, nx.DiGraph):\n        logger.info(\"The input graph is already a directed graph.\")\n        return graph\n    if len(list(nx.connected_components(graph))) &gt; 1:\n        logger.warning(\"\"\"\n        The input graph is not connected.\n        The unconnected components might lose edges\n        \"\"\")\n        origin_part = nx.node_connected_component(graph, origin)\n        fragments = graph.subgraph(set(graph.nodes()) - origin_part)\n        graph = graph.subgraph(origin_part)\n    else:\n        fragments = None\n\n    di_graph = nx.DiGraph(graph)\n    di_graph.remove_edges_from(di_graph.edges - nx.bfs_edges(di_graph, origin))\n\n    if fragments:\n        # choose a node with the highest degree as the origin node\n        # Do this for each fragment\n        for fragment in nx.connected_components(fragments):\n            fragment_subgraph = fragments.subgraph(fragment)\n            \"\"\"Choose a origin of the fragment with the highest degree.\n            This is arbitrary but finding a better node\n            without knowledge were the network broke is hard\"\"\"\n            origin = max(fragment_subgraph.degree, key=lambda x: x[1])[0]\n            di_fragment = nx.DiGraph(fragment_subgraph)\n            di_fragment.remove_edges_from(\n                di_fragment.edges - nx.bfs_edges(di_fragment, origin)\n            )\n            di_graph.add_edges_from(di_fragment.edges(data=True))\n            di_graph.add_nodes_from(di_fragment.nodes(data=True))\n\n    return di_graph\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.make_graph_directed(graph)","title":"<code>graph</code>","text":"(<code>Graph</code>)           \u2013            <p>The undirected graph to convert to a directed graph.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.make_graph_directed(origin)","title":"<code>origin</code>","text":"(<code>int</code>)           \u2013            <p>The node to use as the origin node for the directed graph. The origin node will have no incoming edges.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.orient_splines","title":"orient_splines","text":"<pre><code>orient_splines(graph: DiGraph) -&gt; DiGraph\n</code></pre> <p>Checks if the splines are oriented correctly.</p> <p>If the beginning of the spline is closer to the end node than the start node, it gets flipped. Also checks if the edge coordinates are aligend with the spline. This only checks, if the splines are correctly connected to the nodes, not the order in the Graph. Best used on a directed graph.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DiGraph</code>           \u2013            <p>The graph with the splines oriented correctly.</p> </li> </ul> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def orient_splines(graph: nx.DiGraph) -&gt; nx.DiGraph:\n    \"\"\"Checks if the splines are oriented correctly.\n\n    If the beginning of the spline is closer to the end node than the start node,\n    it gets flipped.\n    Also checks if the edge coordinates are aligend with the spline.\n    This only checks, if the splines are correctly connected to the nodes,\n    not the order in the Graph. Best used on a directed graph.\n\n    Parameters\n    ----------\n    graph : nx.DiGraph\n        The graph to orient the splines in.\n\n    Returns\n    -------\n    nx.DiGraph\n        The graph with the splines oriented correctly.\n\n    \"\"\"\n    edge_spline_dict = {}\n    edge_coordinates_dict = {}\n\n    for u, v, attr in graph.edges(data=True):\n        spline = attr[EDGE_SPLINE_KEY]\n        u_coord = graph.nodes[u][NODE_COORDINATE_KEY]\n        spline_coordinates = spline.eval(np.array([0, 1]))\n        # check if spline evaluation is closer to the start or end node\n        if np.linalg.norm(u_coord - spline_coordinates[0]) &gt; np.linalg.norm(\n            u_coord - spline_coordinates[-1]\n        ):\n            logger.info(f\"Flipped spline of edge ({u,v}).\")\n            edge_coordinates = attr[EDGE_COORDINATES_KEY]\n            # check if path is inverse to spline\n            if np.linalg.norm(\n                edge_coordinates[0] - spline_coordinates[0]\n            ) &gt; np.linalg.norm(edge_coordinates[-1] - spline_coordinates[-1]):\n                edge_coordinates = edge_coordinates[::-1]\n\n            flipped_spline, flipped_cords = spline.flip_spline(edge_coordinates)\n            edge_spline_dict[(u, v)] = flipped_spline\n            edge_coordinates_dict[(u, v)] = flipped_cords\n\n    nx.set_edge_attributes(graph, edge_spline_dict, EDGE_SPLINE_KEY)\n    nx.set_edge_attributes(graph, edge_coordinates_dict, EDGE_COORDINATES_KEY)\n\n    return graph\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.orient_splines(graph)","title":"<code>graph</code>","text":"(<code>DiGraph</code>)           \u2013            <p>The graph to orient the splines in.</p>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.skeleton_graph_decoder","title":"skeleton_graph_decoder","text":"<pre><code>skeleton_graph_decoder(json_object)\n</code></pre> <p>JSON decoder for the networkx skeleton graph.</p> <p>This function is to be used with the Python json.load(s) functions as the <code>object_hook</code> keyword argument.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def skeleton_graph_decoder(json_object):\n    \"\"\"JSON decoder for the networkx skeleton graph.\n\n    This function is to be used with the Python json.load(s) functions\n    as the `object_hook` keyword argument.\n    \"\"\"\n    if \"__class__\" in json_object:\n        # all custom classes are identified by the __class__ key\n        if json_object[\"__class__\"] == \"splinebox.Spline\":\n            json_object.pop(\"__class__\")\n            spline_kwargs = _prepared_dict_for_constructor(json_object)\n            return SplineboxSpline(**spline_kwargs)\n        if json_object[\"__class__\"] == \"skeleplex.B3Spline\":\n            return B3Spline.from_json_dict(json_object)\n    return json_object\n</code></pre>"},{"location":"reference/skeleplex/graph/skeleton_graph/#skeleplex.graph.skeleton_graph.skeleton_graph_encoder","title":"skeleton_graph_encoder","text":"<pre><code>skeleton_graph_encoder(object_to_encode)\n</code></pre> <p>JSON encoder for the networkx skeleton graph.</p> <p>This function is to be used with the Python json.dump(s) functions as the <code>default</code> keyword argument.</p> Source code in <code>skeleplex/graph/skeleton_graph.py</code> <pre><code>def skeleton_graph_encoder(object_to_encode):\n    \"\"\"JSON encoder for the networkx skeleton graph.\n\n    This function is to be used with the Python json.dump(s) functions\n    as the `default` keyword argument.\n    \"\"\"\n    if isinstance(object_to_encode, np.ndarray):\n        return object_to_encode.tolist()\n    elif isinstance(object_to_encode, SplineboxSpline):\n        spline_dict = object_to_encode._to_dict(version=2)\n        if \"__class__\" in spline_dict:\n            raise ValueError(\n                \"The Spline object to encode already has a '__class__' key.\"\n            )\n        spline_dict.update({\"__class__\": \"splinebox.Spline\"})\n        return spline_dict\n    elif isinstance(object_to_encode, B3Spline):\n        return object_to_encode.to_json_dict()\n    raise TypeError(f\"Object of type {type(object_to_encode)} is not JSON serializable\")\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/","title":"spline","text":""},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline","title":"skeleplex.graph.spline","text":"<p>Utilities for fitting and working with splines.</p> <p>Classes:</p> <ul> <li> <code>B3Spline</code>           \u2013            <p>Model for a B3 spline.</p> </li> </ul>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline","title":"B3Spline","text":"<pre><code>B3Spline(model: Spline)\n</code></pre> <p>Model for a B3 spline.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>eval</code>             \u2013              <p>Evaluate the spline at a set of positions.</p> </li> <li> <code>flip_spline</code>             \u2013              <p>Recomputes the spline inverse to the path.</p> </li> <li> <code>from_json_dict</code>             \u2013              <p>Return a B3Spline from a JSON serializable dictionary.</p> </li> <li> <code>from_json_file</code>             \u2013              <p>Construct a B3Spline from a JSON file.</p> </li> <li> <code>from_points</code>             \u2013              <p>Construct a B3 spline fit to a list of points.</p> </li> <li> <code>moving_frame</code>             \u2013              <p>Generate a moving frame long the spline at specified positions.</p> </li> <li> <code>sample_volume_2d</code>             \u2013              <p>Sample a 3D image with 2D planes normal to the spline at specified positions.</p> </li> <li> <code>to_json_dict</code>             \u2013              <p>Return a JSON serializable dictionary.</p> </li> <li> <code>to_json_file</code>             \u2013              <p>Save the spline to a JSON file.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>arc_length</code>               (<code>float</code>)           \u2013            <p>Return the arc length of the spline.</p> </li> <li> <code>model</code>               (<code>Spline</code>)           \u2013            <p>Return the underlying spline model.</p> </li> </ul> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def __init__(self, model: splinebox.Spline):\n    self._model = model\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline(model)","title":"<code>model</code>","text":"(<code>Spline</code>)           \u2013            <p>The spline model.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.arc_length","title":"arc_length  <code>property</code>","text":"<pre><code>arc_length: float\n</code></pre> <p>Return the arc length of the spline.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.model","title":"model  <code>property</code>","text":"<pre><code>model: Spline\n</code></pre> <p>Return the underlying spline model.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.eval","title":"eval","text":"<pre><code>eval(positions: ndarray, derivative: int = 0, atol: float = 1e-06) -&gt; ndarray\n</code></pre> <p>Evaluate the spline at a set of positions.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def eval(\n    self, positions: np.ndarray, derivative: int = 0, atol: float = 1e-6\n) -&gt; np.ndarray:\n    \"\"\"Evaluate the spline at a set of positions.\n\n    Parameters\n    ----------\n    positions : np.ndarray\n        (n,) array of positions to evaluate the spline at.\n        The positions are normalized to the range [0, 1].\n    derivative : int\n        The order of the derivative to evaluate.\n        Default value is 0.\n    atol : float\n        The absolute tolerance for converting the normalized\n        evaluation positions to positions along the spline.\n        Default value is 1e-6.\n    \"\"\"\n    # convert the normalized arc length coordinates to t\n    positions_t = self.model.arc_length_to_parameter(\n        positions * self.arc_length, atol=atol\n    )\n    return self.model.eval(positions_t, derivative=derivative)\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.eval(positions)","title":"<code>positions</code>","text":"(<code>ndarray</code>)           \u2013            <p>(n,) array of positions to evaluate the spline at. The positions are normalized to the range [0, 1].</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.eval(derivative)","title":"<code>derivative</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The order of the derivative to evaluate. Default value is 0.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.eval(atol)","title":"<code>atol</code>","text":"(<code>float</code>, default:                   <code>1e-06</code> )           \u2013            <p>The absolute tolerance for converting the normalized evaluation positions to positions along the spline. Default value is 1e-6.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.flip_spline","title":"flip_spline","text":"<pre><code>flip_spline(path: ndarray) -&gt; B3Spline\n</code></pre> <p>Recomputes the spline inverse to the path.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>B3Spline</code>           \u2013            <p>The flipped spline.</p> </li> <li> <code>ndarray</code>           \u2013            <p>The flipped path coordinates.</p> </li> </ul> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def flip_spline(self, path: np.ndarray) -&gt; \"B3Spline\":\n    \"\"\"Recomputes the spline inverse to the path.\n\n    Parameters\n    ----------\n    path : np.ndarray\n        The coordinates to fit the spline to.\n\n    Returns\n    -------\n    B3Spline\n        The flipped spline.\n    np.ndarray\n        The flipped path coordinates.\n    \"\"\"\n    return self.from_points(path[::-1]), path[::-1]\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.flip_spline(path)","title":"<code>path</code>","text":"(<code>ndarray</code>)           \u2013            <p>The coordinates to fit the spline to.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.from_json_dict","title":"from_json_dict  <code>classmethod</code>","text":"<pre><code>from_json_dict(json_dict: dict) -&gt; B3Spline\n</code></pre> <p>Return a B3Spline from a JSON serializable dictionary.</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>@classmethod\ndef from_json_dict(cls, json_dict: dict) -&gt; \"B3Spline\":\n    \"\"\"Return a B3Spline from a JSON serializable dictionary.\"\"\"\n    if json_dict[\"backend\"] != cls._backend:\n        raise ValueError(\n            f\"Expected backend {cls._backend}, got {json_dict['backend']}.\"\n        )\n\n    # load the spline model\n    spline_model_dict = json_dict[\"model\"]\n\n    if isinstance(spline_model_dict, splinebox.Spline):\n        # model has already been deserialized\n        # this can happen if a this is being called\n        # within another JSON decoder.\n        return cls(model=spline_model_dict)\n\n    spline_model_dict.pop(\"__class__\")\n    spline_kwargs = _prepared_dict_for_constructor(spline_model_dict)\n    spline_model = splinebox.Spline(**spline_kwargs)\n\n    # make the class\n    return cls(model=spline_model)\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.from_json_file","title":"from_json_file  <code>classmethod</code>","text":"<pre><code>from_json_file(file_path: str) -&gt; B3Spline\n</code></pre> <p>Construct a B3Spline from a JSON file.</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>@classmethod\ndef from_json_file(cls, file_path: str) -&gt; \"B3Spline\":\n    \"\"\"Construct a B3Spline from a JSON file.\"\"\"\n    with open(file_path) as file:\n        json_dict = json.load(file)\n    return cls.from_json_dict(json_dict)\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.from_points","title":"from_points  <code>classmethod</code>","text":"<pre><code>from_points(points: ndarray, n_knots: int = 4)\n</code></pre> <p>Construct a B3 spline fit to a list of points.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>@classmethod\ndef from_points(cls, points: np.ndarray, n_knots: int = 4):\n    \"\"\"Construct a B3 spline fit to a list of points.\n\n    Parameters\n    ----------\n    points : np.ndarray\n        (n, d) array of points to fit the spline to.\n        These must be ordered in the positive t direction\n        of the spline.\n    n_knots : int\n        The number of knots to use in the spline.\n    \"\"\"\n    basis_function = splinebox.B3()\n    spline = splinebox.Spline(\n        M=n_knots, basis_function=basis_function, closed=False\n    )\n    spline.fit(points)\n    return cls(model=spline)\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.from_points(points)","title":"<code>points</code>","text":"(<code>ndarray</code>)           \u2013            <p>(n, d) array of points to fit the spline to. These must be ordered in the positive t direction of the spline.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.from_points(n_knots)","title":"<code>n_knots</code>","text":"(<code>int</code>, default:                   <code>4</code> )           \u2013            <p>The number of knots to use in the spline.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.moving_frame","title":"moving_frame","text":"<pre><code>moving_frame(positions: ndarray, method: str = 'bishop', atol: float = 1e-06)\n</code></pre> <p>Generate a moving frame long the spline at specified positions.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def moving_frame(\n    self, positions: np.ndarray, method: str = \"bishop\", atol: float = 1e-6\n):\n    \"\"\"Generate a moving frame long the spline at specified positions.\n\n    Parameters\n    ----------\n    positions : np.ndarray\n        (n,) array of positions to evaluate the spline at.\n        The positions are normalized to the range [0, 1].\n    method : str\n        The method to use for generating the moving frame.\n        Default value is \"bishop\".\n    atol : float\n        The absolute tolerance for converting the normalized\n        evaluation positions to positions along the spline.\n        Default value is 1e-6.\n    \"\"\"\n    # convert the normalized arc length coordinates to t\n    positions_t = self.model.arc_length_to_parameter(\n        positions * self.arc_length, atol=atol\n    )\n    return self.model.moving_frame(positions_t, method=method)\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.moving_frame(positions)","title":"<code>positions</code>","text":"(<code>ndarray</code>)           \u2013            <p>(n,) array of positions to evaluate the spline at. The positions are normalized to the range [0, 1].</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.moving_frame(method)","title":"<code>method</code>","text":"(<code>str</code>, default:                   <code>'bishop'</code> )           \u2013            <p>The method to use for generating the moving frame. Default value is \"bishop\".</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.moving_frame(atol)","title":"<code>atol</code>","text":"(<code>float</code>, default:                   <code>1e-06</code> )           \u2013            <p>The absolute tolerance for converting the normalized evaluation positions to positions along the spline. Default value is 1e-6.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d","title":"sample_volume_2d","text":"<pre><code>sample_volume_2d(volume: ndarray, positions: ndarray, grid_shape: tuple[int, int] = (10, 10), grid_spacing: tuple[float, float] = (1, 1), moving_frame_method: str = 'bishop', sample_interpolation_order: int = 3, sample_fill_value: float = nan)\n</code></pre> <p>Sample a 3D image with 2D planes normal to the spline at specified positions.</p> <p>Parameters:</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def sample_volume_2d(\n    self,\n    volume: np.ndarray,\n    positions: np.ndarray,\n    grid_shape: tuple[int, int] = (10, 10),\n    grid_spacing: tuple[float, float] = (1, 1),\n    moving_frame_method: str = \"bishop\",\n    sample_interpolation_order: int = 3,\n    sample_fill_value: float = np.nan,\n):\n    \"\"\"Sample a 3D image with 2D planes normal to the spline at specified positions.\n\n    Parameters\n    ----------\n    volume : np.ndarray\n        3D image to sample.\n    positions : np.ndarray\n        (n,) array of positions to evaluate the spline at.\n        The positions are normalized to the range [0, 1].\n    grid_shape : tuple[int, int]\n        The number of pixels along each axis of the resulting 2D image.\n        Default value is (10, 10).\n    grid_spacing : tuple[float, float]\n        Spacing between points in the sampling grid.\n        Default value is (1, 1).\n    moving_frame_method : str\n        The method to use for generating the moving frame.\n        Default value is \"bishop\".\n    sample_interpolation_order : int\n        The order of the spline interpolation to use when sampling the image.\n        Default value is 3.\n    sample_fill_value : float\n        The fill value to use when sampling the image outside\n        the bounds of the array. Default value is np.nan.\n    \"\"\"\n    moving_frame = self.moving_frame(\n        positions=positions, method=moving_frame_method\n    )\n\n    # generate the grid of points for sampling the image\n    # (shape (w, h, 3))\n    sampling_grid = generate_2d_grid(\n        grid_shape=grid_shape, grid_spacing=(grid_spacing, grid_spacing)\n    )\n\n    # reshape the sampling grid to be a list of coordinates\n    grid_coords = sampling_grid.reshape(-1, 3)\n\n    # apply each orientation to the grid for each position and store the result\n    rotated = []\n    for frame in moving_frame:\n        rotation_matrix = np.column_stack([frame[0], frame[1], frame[2]])\n        orientation = Rotation.from_matrix(rotation_matrix)\n        rotated.append(orientation.apply(grid_coords))\n\n    # get the coordinates of the points on the spline to center\n    # the sampling grid for the 2D image.\n    sample_centroid_coordinates = positions = self.eval(positions=positions)\n\n    # shift the rotated points to be centered on the spline\n    rotated_shifted = np.stack(rotated, axis=1) + sample_centroid_coordinates\n    placed_sample_grids = rotated_shifted.reshape(-1, *sampling_grid.shape)\n    return sample_volume_at_coordinates(\n        volume=volume,\n        coordinates=placed_sample_grids,\n        interpolation_order=sample_interpolation_order,\n        fill_value=sample_fill_value,\n    )\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(volume)","title":"<code>volume</code>","text":"(<code>ndarray</code>)           \u2013            <p>3D image to sample.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(positions)","title":"<code>positions</code>","text":"(<code>ndarray</code>)           \u2013            <p>(n,) array of positions to evaluate the spline at. The positions are normalized to the range [0, 1].</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(grid_shape)","title":"<code>grid_shape</code>","text":"(<code>tuple[int, int]</code>, default:                   <code>(10, 10)</code> )           \u2013            <p>The number of pixels along each axis of the resulting 2D image. Default value is (10, 10).</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(grid_spacing)","title":"<code>grid_spacing</code>","text":"(<code>tuple[float, float]</code>, default:                   <code>(1, 1)</code> )           \u2013            <p>Spacing between points in the sampling grid. Default value is (1, 1).</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(moving_frame_method)","title":"<code>moving_frame_method</code>","text":"(<code>str</code>, default:                   <code>'bishop'</code> )           \u2013            <p>The method to use for generating the moving frame. Default value is \"bishop\".</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(sample_interpolation_order)","title":"<code>sample_interpolation_order</code>","text":"(<code>int</code>, default:                   <code>3</code> )           \u2013            <p>The order of the spline interpolation to use when sampling the image. Default value is 3.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.sample_volume_2d(sample_fill_value)","title":"<code>sample_fill_value</code>","text":"(<code>float</code>, default:                   <code>nan</code> )           \u2013            <p>The fill value to use when sampling the image outside the bounds of the array. Default value is np.nan.</p>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.to_json_dict","title":"to_json_dict","text":"<pre><code>to_json_dict() -&gt; dict\n</code></pre> <p>Return a JSON serializable dictionary.</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def to_json_dict(self) -&gt; dict:\n    \"\"\"Return a JSON serializable dictionary.\"\"\"\n    spline_model_dict = self.model._to_dict(version=2)\n    if \"__class__\" in spline_model_dict:\n        raise ValueError(\n            \"The Spline object to encode already has a '__class__' key.\"\n        )\n    spline_model_dict.update({\"__class__\": \"splinebox.Spline\"})\n    return {\n        \"__class__\": \"skeleplex.B3Spline\",\n        \"model\": spline_model_dict,\n        \"backend\": self._backend,\n    }\n</code></pre>"},{"location":"reference/skeleplex/graph/spline/#skeleplex.graph.spline.B3Spline.to_json_file","title":"to_json_file","text":"<pre><code>to_json_file(file_path: str) -&gt; None\n</code></pre> <p>Save the spline to a JSON file.</p> Source code in <code>skeleplex/graph/spline.py</code> <pre><code>def to_json_file(self, file_path: str) -&gt; None:\n    \"\"\"Save the spline to a JSON file.\"\"\"\n    with open(file_path, \"w\") as file:\n        json.dump(self.to_json_dict(), file)\n</code></pre>"},{"location":"reference/skeleplex/skeleton/","title":"skeleton","text":""},{"location":"reference/skeleplex/skeleton/#skeleplex.skeleton","title":"skeleplex.skeleton","text":"<p>Tools to create a skeleton image of a structure.</p>"}]}